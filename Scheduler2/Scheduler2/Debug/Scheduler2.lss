
Scheduler2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000626  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800060  00800060  000006ba  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e1f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000261  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000152  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001dd  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000178  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000012f  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000030a  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 3a       	cpi	r26, 0xA8	; 168
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 df 02 	call	0x5be	; 0x5be <main>
  74:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:

void addOneShot(TASK_PTR task, uint16_t period){
	if(tasks_num < MAX_TASKS){
		tasks[tasks_num].Interval = 0;
		tasks[tasks_num].ToGo = period;
		tasks[tasks_num].t = task;
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <init+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	1a 82       	std	Y+2, r1	; 0x02
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	44 c0       	rjmp	.+136    	; 0x114 <init+0x98>
  8c:	29 81       	ldd	r18, Y+1	; 0x01
  8e:	3a 81       	ldd	r19, Y+2	; 0x02
  90:	c9 01       	movw	r24, r18
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	88 0f       	add	r24, r24
		tasks_num++;
  98:	99 1f       	adc	r25, r25
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	82 1b       	sub	r24, r18
  a0:	93 0b       	sbc	r25, r19
  a2:	8a 59       	subi	r24, 0x9A	; 154
  a4:	9f 4f       	sbci	r25, 0xFF	; 255
  a6:	fc 01       	movw	r30, r24
  a8:	11 82       	std	Z+1, r1	; 0x01
	}
}
  aa:	10 82       	st	Z, r1
  ac:	29 81       	ldd	r18, Y+1	; 0x01
  ae:	3a 81       	ldd	r19, Y+2	; 0x02
  b0:	c9 01       	movw	r24, r18
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	88 0f       	add	r24, r24
int tasks_num = 0;

void init(){
	for(int i = 0; i < MAX_TASKS; i++){
		tasks[i].Interval = 0;
		tasks[i].ready = 0;
  b8:	99 1f       	adc	r25, r25
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	82 1b       	sub	r24, r18
  c0:	93 0b       	sbc	r25, r19
  c2:	88 59       	subi	r24, 0x98	; 152
  c4:	9f 4f       	sbci	r25, 0xFF	; 255
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
		tasks[i].t = 0;
  ca:	29 81       	ldd	r18, Y+1	; 0x01
  cc:	3a 81       	ldd	r19, Y+2	; 0x02
  ce:	c9 01       	movw	r24, r18
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	82 1b       	sub	r24, r18
  de:	93 0b       	sbc	r25, r19
  e0:	8e 59       	subi	r24, 0x9E	; 158
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	fc 01       	movw	r30, r24
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1
		tasks[i].ToGo = 0;
  ea:	29 81       	ldd	r18, Y+1	; 0x01
  ec:	3a 81       	ldd	r19, Y+2	; 0x02
  ee:	c9 01       	movw	r24, r18
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	82 1b       	sub	r24, r18
  fe:	93 0b       	sbc	r25, r19
 100:	8c 59       	subi	r24, 0x9C	; 156
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	11 82       	std	Z+1, r1	; 0x01
 108:	10 82       	st	Z, r1

struct tsk tasks[MAX_TASKS];
int tasks_num = 0;

void init(){
	for(int i = 0; i < MAX_TASKS; i++){
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	8a 30       	cpi	r24, 0x0A	; 10
 11a:	91 05       	cpc	r25, r1
 11c:	0c f4       	brge	.+2      	; 0x120 <init+0xa4>
 11e:	b6 cf       	rjmp	.-148    	; 0x8c <init+0x10>
		tasks[i].Interval = 0;
		tasks[i].ready = 0;
		tasks[i].t = 0;
		tasks[i].ToGo = 0;
	}
}
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <addTask>:

void addTask(TASK_PTR task, uint16_t period){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <addTask+0x6>
 130:	00 d0       	rcall	.+0      	; 0x132 <addTask+0x8>
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	9a 83       	std	Y+2, r25	; 0x02
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	7c 83       	std	Y+4, r23	; 0x04
 13c:	6b 83       	std	Y+3, r22	; 0x03
	if(tasks_num < MAX_TASKS){
 13e:	80 91 60 00 	lds	r24, 0x0060
 142:	90 91 61 00 	lds	r25, 0x0061
 146:	8a 30       	cpi	r24, 0x0A	; 10
 148:	91 05       	cpc	r25, r1
 14a:	0c f0       	brlt	.+2      	; 0x14e <addTask+0x24>
 14c:	45 c0       	rjmp	.+138    	; 0x1d8 <addTask+0xae>
		tasks[tasks_num].Interval = period;
 14e:	20 91 60 00 	lds	r18, 0x0060
 152:	30 91 61 00 	lds	r19, 0x0061
 156:	c9 01       	movw	r24, r18
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	82 1b       	sub	r24, r18
 166:	93 0b       	sbc	r25, r19
 168:	8a 59       	subi	r24, 0x9A	; 154
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	2b 81       	ldd	r18, Y+3	; 0x03
 16e:	3c 81       	ldd	r19, Y+4	; 0x04
 170:	fc 01       	movw	r30, r24
 172:	31 83       	std	Z+1, r19	; 0x01
 174:	20 83       	st	Z, r18
		tasks[tasks_num].ToGo = period;
 176:	20 91 60 00 	lds	r18, 0x0060
 17a:	30 91 61 00 	lds	r19, 0x0061
 17e:	c9 01       	movw	r24, r18
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	82 1b       	sub	r24, r18
 18e:	93 0b       	sbc	r25, r19
 190:	8c 59       	subi	r24, 0x9C	; 156
 192:	9f 4f       	sbci	r25, 0xFF	; 255
 194:	2b 81       	ldd	r18, Y+3	; 0x03
 196:	3c 81       	ldd	r19, Y+4	; 0x04
 198:	fc 01       	movw	r30, r24
 19a:	31 83       	std	Z+1, r19	; 0x01
 19c:	20 83       	st	Z, r18
		tasks[tasks_num].t = task;
 19e:	20 91 60 00 	lds	r18, 0x0060
 1a2:	30 91 61 00 	lds	r19, 0x0061
 1a6:	c9 01       	movw	r24, r18
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	82 1b       	sub	r24, r18
 1b6:	93 0b       	sbc	r25, r19
 1b8:	8e 59       	subi	r24, 0x9E	; 158
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	29 81       	ldd	r18, Y+1	; 0x01
 1be:	3a 81       	ldd	r19, Y+2	; 0x02
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 83       	std	Z+1, r19	; 0x01
 1c4:	20 83       	st	Z, r18
		tasks_num++;		
 1c6:	80 91 60 00 	lds	r24, 0x0060
 1ca:	90 91 61 00 	lds	r25, 0x0061
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 61 00 	sts	0x0061, r25
 1d4:	80 93 60 00 	sts	0x0060, r24
	}
}
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <schedule>:
		tasks_num++;
	}
}

//wykonywana w przerwaniu
void schedule(){
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <schedule+0x6>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
	//int i = 0;
	for(int i = 0; i < MAX_TASKS; i++){
 1f0:	1a 82       	std	Y+2, r1	; 0x02
 1f2:	19 82       	std	Y+1, r1	; 0x01
 1f4:	e6 c0       	rjmp	.+460    	; 0x3c2 <schedule+0x1dc>
		//jesli task nie jest pusty zmiejszamy ToGo
		if(tasks[i].t != 0){
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	3a 81       	ldd	r19, Y+2	; 0x02
 1fa:	c9 01       	movw	r24, r18
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	82 1b       	sub	r24, r18
 20a:	93 0b       	sbc	r25, r19
 20c:	8e 59       	subi	r24, 0x9E	; 158
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	09 f4       	brne	.+2      	; 0x21c <schedule+0x36>
 21a:	ce c0       	rjmp	.+412    	; 0x3b8 <schedule+0x1d2>
			tasks[i].ToGo--;
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	3a 81       	ldd	r19, Y+2	; 0x02
 220:	c9 01       	movw	r24, r18
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	82 1b       	sub	r24, r18
 230:	93 0b       	sbc	r25, r19
 232:	8c 59       	subi	r24, 0x9C	; 156
 234:	9f 4f       	sbci	r25, 0xFF	; 255
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	91 81       	ldd	r25, Z+1	; 0x01
 23c:	ac 01       	movw	r20, r24
 23e:	41 50       	subi	r20, 0x01	; 1
 240:	51 09       	sbc	r21, r1
 242:	29 81       	ldd	r18, Y+1	; 0x01
 244:	3a 81       	ldd	r19, Y+2	; 0x02
 246:	c9 01       	movw	r24, r18
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	82 1b       	sub	r24, r18
 256:	93 0b       	sbc	r25, r19
 258:	8c 59       	subi	r24, 0x9C	; 156
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	fc 01       	movw	r30, r24
 25e:	51 83       	std	Z+1, r21	; 0x01
 260:	40 83       	st	Z, r20
			//jesli ToGo = 0 zwiekszamy ready (periodyczny)
			if(tasks[i].ToGo == 0 && tasks[i].Interval != 0){
 262:	29 81       	ldd	r18, Y+1	; 0x01
 264:	3a 81       	ldd	r19, Y+2	; 0x02
 266:	c9 01       	movw	r24, r18
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	82 1b       	sub	r24, r18
 276:	93 0b       	sbc	r25, r19
 278:	8c 59       	subi	r24, 0x9C	; 156
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	09 f0       	breq	.+2      	; 0x288 <schedule+0xa2>
 286:	54 c0       	rjmp	.+168    	; 0x330 <schedule+0x14a>
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	3a 81       	ldd	r19, Y+2	; 0x02
 28c:	c9 01       	movw	r24, r18
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	82 1b       	sub	r24, r18
 29c:	93 0b       	sbc	r25, r19
 29e:	8a 59       	subi	r24, 0x9A	; 154
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	91 81       	ldd	r25, Z+1	; 0x01
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	09 f4       	brne	.+2      	; 0x2ae <schedule+0xc8>
 2ac:	41 c0       	rjmp	.+130    	; 0x330 <schedule+0x14a>
				tasks[i].ready++;
 2ae:	29 81       	ldd	r18, Y+1	; 0x01
 2b0:	3a 81       	ldd	r19, Y+2	; 0x02
 2b2:	c9 01       	movw	r24, r18
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	82 1b       	sub	r24, r18
 2c2:	93 0b       	sbc	r25, r19
 2c4:	88 59       	subi	r24, 0x98	; 152
 2c6:	9f 4f       	sbci	r25, 0xFF	; 255
 2c8:	fc 01       	movw	r30, r24
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	4f 5f       	subi	r20, 0xFF	; 255
 2d0:	29 81       	ldd	r18, Y+1	; 0x01
 2d2:	3a 81       	ldd	r19, Y+2	; 0x02
 2d4:	c9 01       	movw	r24, r18
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	82 1b       	sub	r24, r18
 2e4:	93 0b       	sbc	r25, r19
 2e6:	88 59       	subi	r24, 0x98	; 152
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	fc 01       	movw	r30, r24
 2ec:	40 83       	st	Z, r20
				tasks[i].ToGo = tasks[i].Interval;
 2ee:	29 81       	ldd	r18, Y+1	; 0x01
 2f0:	3a 81       	ldd	r19, Y+2	; 0x02
 2f2:	c9 01       	movw	r24, r18
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	82 1b       	sub	r24, r18
 302:	93 0b       	sbc	r25, r19
 304:	8a 59       	subi	r24, 0x9A	; 154
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	fc 01       	movw	r30, r24
 30a:	40 81       	ld	r20, Z
 30c:	51 81       	ldd	r21, Z+1	; 0x01
 30e:	29 81       	ldd	r18, Y+1	; 0x01
 310:	3a 81       	ldd	r19, Y+2	; 0x02
 312:	c9 01       	movw	r24, r18
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	82 1b       	sub	r24, r18
 322:	93 0b       	sbc	r25, r19
 324:	8c 59       	subi	r24, 0x9C	; 156
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	fc 01       	movw	r30, r24
 32a:	51 83       	std	Z+1, r21	; 0x01
 32c:	40 83       	st	Z, r20
 32e:	44 c0       	rjmp	.+136    	; 0x3b8 <schedule+0x1d2>
			}
			//(nie jest periodyczny)
			else if(tasks[i].ToGo == 0 && tasks[i].Interval == 0){
 330:	29 81       	ldd	r18, Y+1	; 0x01
 332:	3a 81       	ldd	r19, Y+2	; 0x02
 334:	c9 01       	movw	r24, r18
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	82 1b       	sub	r24, r18
 344:	93 0b       	sbc	r25, r19
 346:	8c 59       	subi	r24, 0x9C	; 156
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	91 f5       	brne	.+100    	; 0x3b8 <schedule+0x1d2>
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	3a 81       	ldd	r19, Y+2	; 0x02
 358:	c9 01       	movw	r24, r18
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	82 1b       	sub	r24, r18
 368:	93 0b       	sbc	r25, r19
 36a:	8a 59       	subi	r24, 0x9A	; 154
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	91 81       	ldd	r25, Z+1	; 0x01
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	01 f5       	brne	.+64     	; 0x3b8 <schedule+0x1d2>
				tasks[i].ready++;
 378:	29 81       	ldd	r18, Y+1	; 0x01
 37a:	3a 81       	ldd	r19, Y+2	; 0x02
 37c:	c9 01       	movw	r24, r18
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	82 1b       	sub	r24, r18
 38c:	93 0b       	sbc	r25, r19
 38e:	88 59       	subi	r24, 0x98	; 152
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	fc 01       	movw	r30, r24
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	4f 5f       	subi	r20, 0xFF	; 255
 39a:	29 81       	ldd	r18, Y+1	; 0x01
 39c:	3a 81       	ldd	r19, Y+2	; 0x02
 39e:	c9 01       	movw	r24, r18
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	82 1b       	sub	r24, r18
 3ae:	93 0b       	sbc	r25, r19
 3b0:	88 59       	subi	r24, 0x98	; 152
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	fc 01       	movw	r30, r24
 3b6:	40 83       	st	Z, r20
}

//wykonywana w przerwaniu
void schedule(){
	//int i = 0;
	for(int i = 0; i < MAX_TASKS; i++){
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	9a 81       	ldd	r25, Y+2	; 0x02
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	9a 83       	std	Y+2, r25	; 0x02
 3c0:	89 83       	std	Y+1, r24	; 0x01
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	9a 81       	ldd	r25, Y+2	; 0x02
 3c6:	8a 30       	cpi	r24, 0x0A	; 10
 3c8:	91 05       	cpc	r25, r1
 3ca:	0c f4       	brge	.+2      	; 0x3ce <schedule+0x1e8>
 3cc:	14 cf       	rjmp	.-472    	; 0x1f6 <schedule+0x10>
			else if(tasks[i].ToGo == 0 && tasks[i].Interval == 0){
				tasks[i].ready++;
			}
		}			
	}		
}
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <execute>:

void execute(){
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	00 d0       	rcall	.+0      	; 0x3de <execute+0x6>
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	//while(1){
		for(int i=0; i < MAX_TASKS; i++){
 3e2:	1a 82       	std	Y+2, r1	; 0x02
 3e4:	19 82       	std	Y+1, r1	; 0x01
 3e6:	9d c0       	rjmp	.+314    	; 0x522 <execute+0x14a>
			if(tasks[i].ready > 0){
 3e8:	29 81       	ldd	r18, Y+1	; 0x01
 3ea:	3a 81       	ldd	r19, Y+2	; 0x02
 3ec:	c9 01       	movw	r24, r18
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	82 1b       	sub	r24, r18
 3fc:	93 0b       	sbc	r25, r19
 3fe:	88 59       	subi	r24, 0x98	; 152
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	fc 01       	movw	r30, r24
 404:	80 81       	ld	r24, Z
 406:	88 23       	and	r24, r24
 408:	09 f4       	brne	.+2      	; 0x40c <execute+0x34>
 40a:	86 c0       	rjmp	.+268    	; 0x518 <execute+0x140>
				tasks[i].t();
 40c:	29 81       	ldd	r18, Y+1	; 0x01
 40e:	3a 81       	ldd	r19, Y+2	; 0x02
 410:	c9 01       	movw	r24, r18
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	82 1b       	sub	r24, r18
 420:	93 0b       	sbc	r25, r19
 422:	8e 59       	subi	r24, 0x9E	; 158
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	fc 01       	movw	r30, r24
 428:	80 81       	ld	r24, Z
 42a:	91 81       	ldd	r25, Z+1	; 0x01
 42c:	fc 01       	movw	r30, r24
 42e:	09 95       	icall
				tasks[i].ready--;
 430:	29 81       	ldd	r18, Y+1	; 0x01
 432:	3a 81       	ldd	r19, Y+2	; 0x02
 434:	c9 01       	movw	r24, r18
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	82 1b       	sub	r24, r18
 444:	93 0b       	sbc	r25, r19
 446:	88 59       	subi	r24, 0x98	; 152
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	fc 01       	movw	r30, r24
 44c:	80 81       	ld	r24, Z
 44e:	48 2f       	mov	r20, r24
 450:	41 50       	subi	r20, 0x01	; 1
 452:	29 81       	ldd	r18, Y+1	; 0x01
 454:	3a 81       	ldd	r19, Y+2	; 0x02
 456:	c9 01       	movw	r24, r18
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	82 1b       	sub	r24, r18
 466:	93 0b       	sbc	r25, r19
 468:	88 59       	subi	r24, 0x98	; 152
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	fc 01       	movw	r30, r24
 46e:	40 83       	st	Z, r20
				//usuwanie taska jesli zostal wykonany i nie jest periodyczny
				if(tasks[i].ready == 0 && tasks[i].Interval == 0){
 470:	29 81       	ldd	r18, Y+1	; 0x01
 472:	3a 81       	ldd	r19, Y+2	; 0x02
 474:	c9 01       	movw	r24, r18
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	82 1b       	sub	r24, r18
 484:	93 0b       	sbc	r25, r19
 486:	88 59       	subi	r24, 0x98	; 152
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	fc 01       	movw	r30, r24
 48c:	80 81       	ld	r24, Z
 48e:	88 23       	and	r24, r24
 490:	09 f0       	breq	.+2      	; 0x494 <execute+0xbc>
 492:	42 c0       	rjmp	.+132    	; 0x518 <execute+0x140>
 494:	29 81       	ldd	r18, Y+1	; 0x01
 496:	3a 81       	ldd	r19, Y+2	; 0x02
 498:	c9 01       	movw	r24, r18
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	82 1b       	sub	r24, r18
 4a8:	93 0b       	sbc	r25, r19
 4aa:	8a 59       	subi	r24, 0x9A	; 154
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	fc 01       	movw	r30, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	91 81       	ldd	r25, Z+1	; 0x01
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	81 f5       	brne	.+96     	; 0x518 <execute+0x140>
					tasks[i].Interval = 0;
 4b8:	29 81       	ldd	r18, Y+1	; 0x01
 4ba:	3a 81       	ldd	r19, Y+2	; 0x02
 4bc:	c9 01       	movw	r24, r18
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	82 1b       	sub	r24, r18
 4cc:	93 0b       	sbc	r25, r19
 4ce:	8a 59       	subi	r24, 0x9A	; 154
 4d0:	9f 4f       	sbci	r25, 0xFF	; 255
 4d2:	fc 01       	movw	r30, r24
 4d4:	11 82       	std	Z+1, r1	; 0x01
 4d6:	10 82       	st	Z, r1
					tasks[i].ToGo = 0;
 4d8:	29 81       	ldd	r18, Y+1	; 0x01
 4da:	3a 81       	ldd	r19, Y+2	; 0x02
 4dc:	c9 01       	movw	r24, r18
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	82 1b       	sub	r24, r18
 4ec:	93 0b       	sbc	r25, r19
 4ee:	8c 59       	subi	r24, 0x9C	; 156
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	fc 01       	movw	r30, r24
 4f4:	11 82       	std	Z+1, r1	; 0x01
 4f6:	10 82       	st	Z, r1
					tasks[i].t = 0;				
 4f8:	29 81       	ldd	r18, Y+1	; 0x01
 4fa:	3a 81       	ldd	r19, Y+2	; 0x02
 4fc:	c9 01       	movw	r24, r18
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	82 1b       	sub	r24, r18
 50c:	93 0b       	sbc	r25, r19
 50e:	8e 59       	subi	r24, 0x9E	; 158
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	fc 01       	movw	r30, r24
 514:	11 82       	std	Z+1, r1	; 0x01
 516:	10 82       	st	Z, r1
	}		
}

void execute(){
	//while(1){
		for(int i=0; i < MAX_TASKS; i++){
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	9a 81       	ldd	r25, Y+2	; 0x02
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	9a 83       	std	Y+2, r25	; 0x02
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	9a 81       	ldd	r25, Y+2	; 0x02
 526:	8a 30       	cpi	r24, 0x0A	; 10
 528:	91 05       	cpc	r25, r1
 52a:	0c f4       	brge	.+2      	; 0x52e <execute+0x156>
 52c:	5d cf       	rjmp	.-326    	; 0x3e8 <execute+0x10>
					tasks[i].t = 0;				
				}
			}			
		}	
	//}
}  
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <__vector_11>:

ISR(TIMER0_OVF_vect){
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	00 90 5f 00 	lds	r0, 0x005F
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
	schedule();
 564:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <schedule>
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	00 92 5f 00 	sts	0x005F, r0
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <task1>:

void task1(){
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0xFF;	
 598:	8b e3       	ldi	r24, 0x3B	; 59
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	fc 01       	movw	r30, r24
 5a0:	20 83       	st	Z, r18
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <task2>:

void task2(){
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
 5b0:	8b e3       	ldi	r24, 0x3B	; 59
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	fc 01       	movw	r30, r24
 5b6:	10 82       	st	Z, r1
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <main>:

int main(void)
{
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
	//timer w tryb CTC
	//OCR na 250
	// prescaler na 64
	OCR0 = 250;
 5c6:	8c e5       	ldi	r24, 0x5C	; 92
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	2a ef       	ldi	r18, 0xFA	; 250
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 83       	st	Z, r18
	TCCR0 |= (0 << WGM00) | (0 << WGM01) | (0 << CS02) | (1 << CS01) | (1 << CS00) | (0 << COM01) | (0 << COM00);
 5d0:	83 e5       	ldi	r24, 0x53	; 83
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	23 e5       	ldi	r18, 0x53	; 83
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	f9 01       	movw	r30, r18
 5da:	20 81       	ld	r18, Z
 5dc:	23 60       	ori	r18, 0x03	; 3
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
	TIMSK |= (1 << TOIE0);
 5e2:	89 e5       	ldi	r24, 0x59	; 89
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	29 e5       	ldi	r18, 0x59	; 89
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	f9 01       	movw	r30, r18
 5ec:	20 81       	ld	r18, Z
 5ee:	21 60       	ori	r18, 0x01	; 1
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 83       	st	Z, r18
	DDRA = 0xFF;
 5f4:	8a e3       	ldi	r24, 0x3A	; 58
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	2f ef       	ldi	r18, 0xFF	; 255
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
	
	init();
 5fe:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
    addTask(task1, 2);
 602:	62 e0       	ldi	r22, 0x02	; 2
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	88 ec       	ldi	r24, 0xC8	; 200
 608:	92 e0       	ldi	r25, 0x02	; 2
 60a:	0e 94 95 00 	call	0x12a	; 0x12a <addTask>
	addTask(task2, 4);
 60e:	64 e0       	ldi	r22, 0x04	; 4
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	84 ed       	ldi	r24, 0xD4	; 212
 614:	92 e0       	ldi	r25, 0x02	; 2
 616:	0e 94 95 00 	call	0x12a	; 0x12a <addTask>
	sei();
 61a:	78 94       	sei
	//for(;;)
	while(1){
	execute();
 61c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <execute>
	}
 620:	fd cf       	rjmp	.-6      	; 0x61c <main+0x5e>

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
